###
Problem 61
Cyclical figurate numbers

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal
numbers are all figurate (polygonal) numbers and are generated by the
following formulae:

Triangle        P3,n=n(n+1)/2     1, 3, 6, 10, 15, ...
Square          P4,n=n2           1, 4, 9, 16, 25, ...
Pentagonal      P5,n=n(3n-1)/2    1, 5, 12, 22, 35, ...
Hexagonal       P6,n=n(2n-1)      1, 6, 15, 28, 45, ...
Heptagonal      P7,n=n(5n-3)/2    1, 7, 18, 34, 55, ...
Octagonal       P8,n=n(3n-2)      1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

1. The set is cyclic, in that the last two digits of each number is
the first two digits of the next number (including the last number
with the first).
2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281),
and pentagonal (P5,44=2882), is represented by a different number in
the set.
3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for
which each polygonal type: triangle, square, pentagonal, hexagonal,
heptagonal, and octagonal, is represented by a different number in the
set.
###

_ = require './utils/underscore-min'

poly = {}

poly.tri = []
poly.squ = []
poly.pen = []
poly.hex = []
poly.hep = []
poly.oct = []

# populate arrays
n     = 1
loop
  poly.tri[n] = n * (n + 1) / 2
  poly.squ[n] = n * n
  poly.pen[n] = n * (3 * n - 1) / 2
  poly.hex[n] = n * (2 * n - 1)
  poly.hep[n] = n * (5 * n - 3) / 2
  poly.oct[n] = n * (3 * n - 2)
  # console.log tri[n]
  if poly.tri[n] > 9999 # triangulars are the slowest growing numbers
    break
  n++
# end loop

# clean up
for name, arr of poly
  poly[name] = _.filter(arr, (e) -> 
    s = e.toString().split('')
    # retain only 4-digit numbers
    (1000 <= e <= 9999) and
    # numbers like XX00 and XX0X are not ok 
    ( s[2] isnt '0')
   )

for name of poly
  console.log(name, poly[name].length)
  console.log JSON.stringify(poly[name])

first2 = (num) ->
  num.toString()[0..1]
last2 = (num) ->
  num.toString()[2..3]
# console.log last2(7080) is first2(8066)

# cautam abcd cdef efgh ghij ijkl klab 
# si putem incepe cu oricare, preferam oct ca sunt cele mai putine

second = {}
for xOct in poly.oct
  # console.log xOct
  second[xOct] = {}
  for name of poly when name isnt 'oct'
    second[xOct][name] = []
    # console.log name
    # second[name].push poly[name][0]
    for next in poly[name]
      if last2(xOct) is first2(next)
        # console.log xOct, next
        second[xOct][name].push next


console.log second



